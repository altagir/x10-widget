/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp ../controller/service/ca.cyberdine.x10.xml -p X10DbusInterface
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef X10DBUSINTERFACE_H_1384832050
#define X10DBUSINTERFACE_H_1384832050

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface ca.cyberdine.x10
 */
class CaCyberdineX10Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "ca.cyberdine.x10"; }

public:
    CaCyberdineX10Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CaCyberdineX10Interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AllOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("AllOff"), argumentList);
    }

    inline QDBusPendingReply<> AllOn()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("AllOn"), argumentList);
    }

    inline QDBusPendingReply<QString> GetProperty(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetProperty"), argumentList);
    }

    inline QDBusPendingReply<int> GetValue(const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("GetValue"), argumentList);
    }

    inline QDBusPendingReply<> Quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Quit"), argumentList);
    }

    inline QDBusPendingReply<> Reload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Reload"), argumentList);
    }

    inline QDBusPendingReply<> Restart()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Restart"), argumentList);
    }

    inline QDBusPendingReply<> Send(const QString &channel, uint unit, const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(channel) << QVariant::fromValue(unit) << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QLatin1String("Send"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &channel, uint unit, int value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(channel) << QVariant::fromValue(unit) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("Set"), argumentList);
    }

    inline QDBusPendingReply<> SetProperty(const QString &name, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("SetProperty"), argumentList);
    }

    inline QDBusPendingReply<> Start()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Start"), argumentList);
    }

    inline QDBusPendingReply<> Stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CommandCompleted(const QString &channel, uint unit, const QString &command, int value);
    void PropertyUpdated(const QString &name, const QString &value);
    void SourceUpdated(const QString &address, int value);
};

namespace ca {
  namespace cyberdine {
    typedef ::CaCyberdineX10Interface x10;
  }
}
#endif
